# -*- coding: utf-8 -*-
"""homework_lineales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qNt0w1JPsr6DCZPg5Ty4v_HA_aQBrbjn
"""

import numpy as np
import matplotlib.pyplot as plt
import sympy as sp
from sympy import Symbol
from sympy import integrate 
import math

t= np.linspace(-1,1,6)
x1= np.sin(10*np.pi*t)

t1= np.linspace(-20,20,50)

x11= 5*np.cos((2*np.pi*t1)/8)
x2 = -8*math.e**-(t1/6)**2
plt.plot(t1,x11,'r')
plt.plot(t1,x2,'b')
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

x3= x11*x2
#plt.plot(t1,x3,'p')
plt.stem(t1, x3, linefmt="k")
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

x4= 4*x11+2*x2
#plt.plot(t1,x4,'p')
plt.stem(t1, x4, linefmt="k")
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

x12= 5*np.cos((2*np.pi*2*t1)/8)
x21 = -8*math.e**-(-1*t1/6)**2
x6= x12/x21
#plt.plot(t1,x6,'b')


plt.stem(t1, x6, linefmt="k")
plt.axvline(0,color="black")
plt.xlabel("tiempo")
plt.axhline(0,color="black")
plt.grid()
#plt.stem(t1, x6, use_line_collection=True)
plt.show()

"""ejercicio 16"""

def function(t2):
  f=[]
  for i in range(0,len(t2)):
    if t2[i]<-4:
      f.append(-2)
    elif t2[i] < 1:
      f.append(t2[i])
    elif t2[i] >= 1:
      f.append(4/t2[i])
  return f

t2= np.linspace(-10,10,40)
g= function(t2)
plt.stem(t2,g,linefmt="k")
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

def function1(t3):
  f1=[]
  for i in range(0,len(t3)):
    if t3[i]<-4:
      f1.append(-2)
    elif t3[i] < 1:
      f1.append(t3[i])
    elif t3[i] >= 1:
      f1.append(4/t3[i])
  return f1

t3= np.linspace(-10,10,25)
g1= function1(2*t3)
plt.stem(t3,g1,linefmt="k")
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

"""pregunta 17"""

def funcion2(t4):
  f2=[]
  for j in range(0,len(t4)):
    if t4[j]<0:
      f2.append(0)
    elif t4[j]>=0:
      f2.append(1)
  return f2

t4= np.linspace(-10,10,20)
g2= funcion2(t4)
plt.stem(t4,g2,linefmt="k")
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

def funcion3(t5):
  f3=[]
  for j in range(0,len(t5)):
    if t5[j]<-8:
      f3.append(0)
    elif t5[j]>=-8:
      f3.append(1)
  return f3

t5= np.linspace(-20,20,40)
g3= funcion3(t5)
plt.stem(t5,g3,linefmt="k")
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

fx= np.cos((2*np.pi*t5)/16)*g3
plt.stem(t5,fx,linefmt="black")
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

def funcion4(t6):
  f4=[]
  for k in range(0,len(t6)):
    if t6[k]<0:
      f4.append(0)
    elif t6[k] == 0:
      f4.append(1)
    elif t6[k]>0:
      f4.append(0)
  return f4

t6= np.linspace(-20,20,41)
g4= funcion4(t6)
plt.stem(t6,g4,linefmt="k")
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

"""pregunta 19"""

def funcion5(t7):
  f5=[]
  for j in range(0,len(t7)):
    if t7[j]<0:
      f5.append(0)
    elif t7[j]>=0:
      f5.append(1)
  return f5

t7= np.linspace(-10,10,20)
g5= funcion5(t7)
plt.stem(t7,g5,linefmt="k")
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

t8= np.linspace(-10,10,45)
xcos= np.cos((2*np.pi*t8)/4)
plt.stem(t8,xcos,linefmt="k")
plt.plot(t8,xcos,'r')
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

t9= np.linspace(-10,10,45)
xco= t9*0
plt.stem(t9,xco,linefmt="k")
plt.plot(t9,xco,'r')
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

"""pregunta 20"""

t10= np.linspace(-10,10,45)
x12= np.cos(2*np.pi*t10)
x13= np.sin(2*np.pi*t10)
x14= x12*x13
plt.stem(t10,x14,linefmt="k")
plt.plot(t10,x14,'r')
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

"""pregunta 21 parte a"""

def funcion7(t19):
  f7=[]
  for l in range(0,len(t19)):
    if t19[l]<0:
      f7.append(0)
    elif t19[l] >= 0:
      f7.append(t19[l])
  return f7

def funcion8(t19):
  f8=[]
  for l in range(0,len(t19)):
    if t19[l]<4:
      f8.append(0)
    elif t19[l] >= 4:
      f8.append(-2*(t19[l]-4))
  return f8

def funcion9(t19):
  f9=[]
  for l in range(0,len(t19)):
    if t19[l]<8:
      f9.append(0)
    elif t19[l] >= 8:
      f9.append(t19[l]-8)
  return f9

def funcion10(t19):
  f10=[]
  for h in range(0,len(t19)):
    xsum=g7[h]+g8[h]+g9[h]
    f10.append(xsum)
  return f10


t19= np.linspace(-20,20,41)
g7= funcion7(t19)
g8= funcion8(t19)
g9= funcion9(t19)
xsum= funcion10(t19)
plt.stem(t19,g7,linefmt="k")
plt.stem(t19,g8,linefmt="b")
plt.stem(t19,g9,linefmt="r")
#plt.stem(t19,xsum,linefmt="p")
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

plt.stem(t19,xsum,linefmt="k")
plt.axvline(0,color="black")
plt.axhline(0,color="black")
plt.grid()
plt.show()

